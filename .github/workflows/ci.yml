name: ci

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  js-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Setup node env 🏗
        uses: actions/setup-node@v2.1.2
        with:
          node-version: 14

      - name: Cache node_modules 📦
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 👨🏻‍💻
        working-directory: ./frontend
        run: yarn

      - name: Run linter 👀
        working-directory: ./frontend
        run: yarn lint

      - name: Run tests 🧪
        working-directory: ./frontend
        run: yarn test

  python-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Set up Python 3.8 🐍
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Cache pip 📦
        uses: actions/cache@v2
        id: pip-cache
        with:
          path: |
            .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies 👨🏻‍💻
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Lint with flake8 👀
        working-directory: ./backend/memorial
        run: flake8 .

      - name: Test with pytest 🧪
        working-directory: ./backend/memorial
        run: pytest -vv -s -x --cov=.

  deploy:
    runs-on: ubuntu-latest
    needs: [js-test, python-test]
    # if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout 🛎
        uses: actions/checkout@master

      - name: Get secrets
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          credentials: ${{ secrets.DEPLOY_SERVICE_ACCOUNT }}
          secrets: |-
            env_variables:${{ secrets.GCP_PROJECT }}/env_variables
            gcs_service_account:${{ secrets.GCP_PROJECT }}/gcs_service_account

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.DEPLOY_SERVICE_ACCOUNT }}
          export_default_credentials: true

      - name: Deploy to App Engine
        env:
          ENV_VARS: ${{ steps.secrets.outputs.env_variables }}
          GCS_SA: ${{ steps.secrets.outputs.gcs_service_account }}
        run: |
          echo $ENV_VARS > backend/env_variables.yaml
          echo $GCS_SA > backend/memorial/gcs_service_account.js
          gcloud --quiet --project ${{ secrets.GCP_PROJECT }} app deploy backend/backend.yaml
